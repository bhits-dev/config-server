server:
  port: 8899
logging:
  file: /java/C2S_LOGS/config-server/config-server.log
info:
  component: Config Server
eureka:
  instance:
    instance-id: ${spring.cloud.client.hostname}:${spring.application.name}:${spring.application.instance_id:${random.value}}
    secure-port-enabled: false
    non-secure-port-enabled: true
    metadata-map:
      user: ${security.user.name}
      password: ${security.user.password}
  client:
    healthcheck:
      enabled: true
    service-url:
      # endpoint for discovery-server, pass '--eureka.client.protocol=https' if discovery-server is running on https
      defaultZone: ${eureka.client.protocol:http}://localhost:8761/eureka/
spring:
  cloud:
    config:
      server:
        # Enable encrypt property for config-server side decryption while serving configuration (if true, also requires `encrypt.key`)
        encrypt:
          enabled: false
        git:
          uri: file:/java/c2s-config-data
          # basedir is only effective if remote repository is used
          # EXAMPLE:
          # basedir: /java/config-server-git-repo
          #
          # Setting a repository to be cloned is to identify a misconfigured configuration source quickly, while the Config Server is starting up.
          # EXAMPLE:
          # clone-on-start: true
security:
  basic:
    enabled: true
  user:
    name: admin
    password: changeit
  sessions: stateless
management:
  security:
    enabled: true
    sessions: stateless
  context-path: /management
# The server exposes /encrypt and /decrypt endpoints for Encryption and Decryption
# You need to configure a key for server side encryption/decryption
# EXAMPLE:
#encrypt.key: U5bgFraKRMNN
# encrypt.key: key_value
---
# updates configuration for docker environment
spring.profiles: docker
eureka:
  client:
    service-url:
      defaultZone: ${eureka.client.protocol:http}://discovery-server.c2s.com:8761/eureka/
  instance:
    prefer-ip-address: true